generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String        @id @default(uuid())
  delete              Int?
  status              Boolean?
  nome                String?
  username            String?
  type_document       String?
  document            String?        @unique
  email               String?        @unique
  termo               Boolean?
  instituicao         String? 
  id_telegram         String?        @unique
  ddd_phone           String?
  phone               String?
  avatar_url          String?
  recomendado         Int?
  desaconselhado      Int?
  updated_at          DateTime      @updatedAt @default(now())
  created_at          DateTime      @default(now())
  produto             Produtos[]
  pedido              Pedidos[]
  alerta              Alertas[]

  @@map("bdmil_users")
}

model Produtos {
  id                  Int            @id @default(autoincrement())
  delete              Int?
  status              Boolean?
  categoria           String?
  descricao           String?
  valor_produto       String?
  link_pagamento      String?
  user_id             String
  message_id          Int?  // Id quando cirar um produto, vamos precisar quando for deletar um produto             
  updated_at          DateTime      @updatedAt @default(now())
  created_at          DateTime      @default(now())

  users               Users         @relation(fields: [user_id], references: [id])

  pedido              Pedidos[]

  @@map("bdmil_produtos")
}

model Pedidos {
  id                  Int          @id @default(autoincrement())
  delete              Int?
  status              String?
  valor               String?
  categoria           String?
  titulo              String?
  nome                String?
  document            String?      
  email               String?
  id_telegram         String?
  phone               String?
  transacao_id        String?       @unique
  msg_id              Int?
  user_id             String
  produto_id          Int
  updated_at          DateTime      @updatedAt @default(now())
  created_at          DateTime      @default(now())

  users               Users         @relation(fields: [user_id], references: [id])
  produto             Produtos      @relation(fields: [produto_id], references: [id])

  intencao            intencao_de_compras[]

  @@map("bdmil_pedidos")
}

model intencao_de_compras {
  id                      Int           @id @default(autoincrement())
  delete                  Int?
  vendedor_id_telegram    String
  comprador_id_telegram   String
  pedido_id               Int
  updated_at              DateTime      @updatedAt @default(now())
  created_at              DateTime      @default(now())

  pedido                  Pedidos       @relation(fields: [pedido_id], references: [id])

  @@map("bdmil_intencao_de_compras")
}

model Alertas {
  id                      Int           @id @default(autoincrement())
  delete                  Int?
  palavra_chave           String
  user_id                 String
  id_telegram             String
  updated_at              DateTime      @updatedAt @default(now())
  created_at              DateTime      @default(now())

  users                   Users         @relation(fields: [user_id], references: [id])

  @@map("bdmil_alertas")
}

model Grupos {
  id                      Int           @id @default(autoincrement())
  delete                  Int?
  type                    String        @unique
  link                    String
  id_grupo                String
  updated_at              DateTime      @updatedAt @default(now())
  created_at              DateTime      @default(now())

  @@map("bdmil_grupos")
}